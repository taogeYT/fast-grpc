{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Fast to Code gRPC in Python 3.9+</p>"},{"location":"#installation","title":"Installation","text":"<p>Require Python 3.9+</p> <pre><code>pip install python-fast-grpc\n</code></pre>"},{"location":"#quick-start","title":"Quick start","text":"<ol> <li>Run a gRPC application</li> </ol> <pre><code>from pydantic import BaseModel\nfrom fast_grpc import FastGRPC\n\napp = FastGRPC(service_name=\"Greeter\", proto=\"greeter.proto\")\n\nclass HelloRequest(BaseModel):\n    name: str\n\nclass HelloReply(BaseModel):\n    message: str\n\n@app.unary_unary()\nasync def say_hello(request: HelloRequest) -&gt; HelloReply:\n    return HelloReply(message=f\"Greeter SayHello {request.name}\")\n\n# this step will generate .proto file and python gRPC code, then start a grpc server\napp.run()\n</code></pre> <ol> <li>Client invoke</li> </ol> <pre><code>import grpc\nimport greeter_pb2 as pb2\nimport greeter_pb2_grpc as pb2_grpc\n\nchannel = grpc.insecure_channel(\"127.0.0.1:50051\")\nstub = pb2_grpc.GreeterStub(channel)\nresponse = stub.SayHello(pb2.HelloRequest(name=\"fastGRPC\"))\nprint(\"Greeter client received: \", response)\n</code></pre>"}]}