{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>FastGRPC is a high-performance gRPC framework designed to simplify the development of gRPC services</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Fast to code: FastAPI-like API design</li> <li>Pure async: Built with async/await only</li> <li>Pydantic integration: Request/Response validation</li> <li>Auto Proto: Automatic .proto file generation</li> <li>Type hints: Full Python type annotations support</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Requires Python 3.9+</p> <pre><code>pip install python-fast-grpc\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Create a simple gRPC service:</p> <pre><code>from pydantic import BaseModel\nfrom fast_grpc import FastGRPC\n\n# create a FastGRPC app\n# service_name: defines the default service name in proto file\n# proto: defines the default proto file path\n# auto_gen_proto: if True, will automatically generate proto file from your code\n#                if False, you need to provide your own proto file\napp = FastGRPC(\n    service_name=\"Greeter\",  # default service name\n    proto=\"greeter.proto\",   # default proto file path\n    auto_gen_proto=True      # auto generate proto file\n)\n\nclass HelloRequest(BaseModel):\n    name: str\n\nclass HelloReply(BaseModel):\n    message: str\n\n@app.unary_unary()\nasync def say_hello(request: HelloRequest) -&gt; HelloReply:\n    return HelloReply(message=f\"Greeter SayHello {request.name}\")\n\nif __name__ == '__main__':\n    app.run()\n</code></pre> <p>Test with a client:</p> <pre><code>import grpc\nimport greeter_pb2 as pb2\nimport greeter_pb2_grpc as pb2_grpc\n\nchannel = grpc.insecure_channel(\"127.0.0.1:50051\")\nstub = pb2_grpc.GreeterStub(channel)\nresponse = stub.SayHello(pb2.HelloRequest(name=\"FastGRPC\"))\nprint(\"Greeter client received: \", response)\n</code></pre> <p>Use Context:</p> <pre><code>from fast_grpc import ServiceContext\n@app.unary_unary()\nasync def unary_unary(request: HelloRequest, context: ServiceContext) -&gt; HelloReply:\n    print(context.metadata)\n    return HelloReply(message=f\"Hello {request.name}\")\n</code></pre>"},{"location":"#service-definition","title":"Service Definition","text":"<p>FastGRPC supports define your gRPC methods in a single Service:</p> <pre><code>from pydantic import BaseModel\nfrom fast_grpc import FastGRPC, Service\n\napp = FastGRPC()\n\nclass HelloRequest(BaseModel):\n    name: str\n\nclass HelloReply(BaseModel):\n    message: str\n\n# Create a service with specific name and proto file\nsrv = Service(\n    name=\"Greeter\",        # service name in proto file\n    proto=\"greeter.proto\"  # proto file path for this service\n)\n\n@srv.unary_unary()\nasync def say_hello(request: HelloRequest) -&gt; HelloReply:\n    return HelloReply(message=f\"Hello {request.name}\")\n\nif __name__ == '__main__':\n    app.add_service(srv)  # add service to app\n    app.run()\n</code></pre>"},{"location":"#streaming-methods","title":"Streaming Methods","text":"<p>FastGRPC supports grpc streaming methods:</p>"},{"location":"#unary-unary","title":"Unary-Unary","text":"<pre><code>@app.unary_unary()\nasync def unary_unary(request: HelloRequest) -&gt; HelloReply:\n    return HelloReply(message=f\"Hello {request.name}\")\n</code></pre>"},{"location":"#stream-unary","title":"Stream-Unary","text":"<pre><code>@app.stream_unary()\nasync def stream_unary(request: AsyncIterator[HelloRequest]) -&gt; HelloReply:\n    response = HelloReply(message=\"SayHello:\")\n    async for message in request:\n        response.message += f\" {message.name}\"\n    return response\n</code></pre>"},{"location":"#unary-stream","title":"Unary-Stream","text":"<pre><code>@app.unary_stream()\nasync def unary_stream(request: HelloRequest) -&gt; AsyncIterator[HelloReply]:\n    for i in range(3):\n        yield HelloReply(message=f\"SayHello: {request.name} {i}\")\n</code></pre>"},{"location":"#stream-stream","title":"Stream-Stream","text":"<pre><code>@app.stream_stream()\nasync def stream_stream(\n    request: AsyncIterator[HelloRequest],\n) -&gt; AsyncIterator[HelloReply]:\n    async for message in request:\n        yield HelloReply(message=f\"SayHello: {message.name}\")\n</code></pre> <p>These examples demonstrate how to implement different types of gRPC streaming methods using FastGRPC. Each method is fully asynchronous, leveraging Python's <code>async</code> and <code>await</code> syntax for efficient I/O operations.</p>"}]}